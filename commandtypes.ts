import { StructuredErrorResponse } from 'f61ui/types';

export enum CrudNature {
	update = 'update',
	delete = 'delete',
	create = 'create',
}

// static (except for customFields) definition generated from commands.json
export interface CommandDefinition {
	title: string;
	key: string;
	additional_confirmation?: string;
	crudNature: CrudNature;
	fields: CommandField[];
	settings: CommandSettings;
	info: string[];
	customFields?: { [key: string]: CustomFieldInputFactory<any> };
}

// dynamic settings controlled by the calling code
export interface CommandSettings {
	// so there's no hesitation of "did I pick the right row for this action?"
	disambiguation?: string;
	helpUrl?: string;
	// if returns empty string, considered as error and form is not closed
	redirect?: (id: string) => string;
	error?: (err: StructuredErrorResponse, values: CommandValueCollection) => boolean;
}

export enum CommandFieldKind {
	Text,
	Password,
	Multiline,
	Checkbox,
	Integer,
	Date,
	Any, // for custom datatypes (not same as custom components - don't have autogenerated UI component)
	CustomString, // custom UI component (maybe autocomplete), yielding a string
	CustomInteger, // custom UI component (maybe autocomplete), yielding a number
}

// T is type of the output value from the component
export type CustomFieldInputFactory<T> = (
	field: CommandField,
	value: T,
	update: (val: T | undefined) => void,
	autoFocus: boolean,
) => JSX.Element;

export interface CommandField {
	Key: string;
	Title: string;
	Required: boolean;
	HideIfDefaultValue: boolean;
	Kind: CommandFieldKind;
	Unit: string | null;
	DefaultValueString?: string;
	DefaultValueBoolean?: boolean;
	DefaultValueNumber?: number;
	DefaultValueAny?: any;
	Help?: string;
	Placeholder?: string;
	ValidationRegex: string;
}

export interface CommandValueCollection {
	[key: string]: any;
}
